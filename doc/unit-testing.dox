namespace Corrade { namespace TestSuite {
/** @page unit-testing Unit testing with TestSuite

%Corrade's test suite is inspired by QtTest framework, but without any need to
process code with meta compiler.

@section unit-testing-class Tester class

First step for creating unit test is to subclass Tester class and add tester
functions to it. Note that [CRTP](http://en.wikipedia.org/wiki/Curiously_Recurring_Template_Pattern)
needs to be used when subclassing to make things working.
@dontinclude test/MyTest.h
@skip class MyTest
@until };

In constructor we register our test cases:
@dontinclude test/MyTest.cpp
@skip MyTest::MyTest
@until }

Now we implement our test cases. The simplest macro is CORRADE_VERIFY(), which
only verifies that expression is true, if not, it exits current test case
(i.e. skips processing the rest of the function) and prints error on error
output:
@skip MyTest::commutativity()
@until }

Next macro is CORRADE_COMPARE(), which takes two values and compares them for
equality:
@skip MyTest::associativity()
@until }

If both values have different type or if we want to force some type for
comparison, we can use CORRADE_COMPARE_AS(). This macro can be used also for
more involved comparison using "pseudo-types", see Compare class
documentation for more information.
@skip MyTest::sin()
@until }

If you have some unimplemented or broken functionality, but don't want the
test to fail only because of that, you can use CORRADE_EXPECT_FAIL() macro,
which expects all following checks until the end of the scope to fail:
@skip MyTest::pi()
@until }

@section unit-testing-compilation Compilation and running

Lastly, we must not forget to create `main()` function using
CORRADE_TEST_MAIN() macro:
@skipline CORRADE_TEST_MAIN

Now we can compile and run our test using CMake and `corrade_add_test2()`
macro:
@code
find_package(Corrade REQUIRED)
include_directories(${CORRADE_INCLUDE_DIR})
corrade_add_test2(mytest MyTest.cpp)
@endcode

The test can be run either manually or using `ctest`. When executed, it
produces output similar to this:

    Starting Corrade::Examples::MyTest with 4 test cases...
      FAIL: commutativity() at examples/test/MyTest.cpp on line 32
            Expression 15/3 == 3/15 failed.
        OK: associativity()
        OK: sin()
     XFAIL: pi() at examples/test/MyTest.cpp on line 47
            Need better approximation. pi and 3.14 are not equal.
        OK: pi()
    Finished Corrade::Examples::MyTest with 1 errors.

 - @ref test/MyTest.h
 - @ref test/MyTest.cpp

*/
}}
