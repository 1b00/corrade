/*
    This file is part of Corrade.

    Copyright © 2007, 2008, 2009, 2010, 2011, 2012, 2013
              Vladimír Vondruš <mosra@centrum.cz>

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

namespace Corrade { namespace PluginManager {
/** @page plugin-management Plugin management tutorial

The PluginManager class provides hierarchical plugin management functions.
Main features:

- Plugin manager version and plugin interface version checks to avoid
  unexpected behavior
- Both static and dynamic plugin support
- Plugin dependecies and conflicts
- Usage checks, manager doesn't allow plugin unload if there are any active
  plugin instances

This tutorial will give you a brief introduction into how plugins are defined,
compiled and managed.

@tableofcontents

@section plugin-management-interface Plugin interface

Plugin interface is class with well defined abstract public methods, which
defines the way how to work with a particular plugin.

Every plugin interface must be derived from AbstractPlugin class and must
reimplement AbstractPlugin constructor. This is needed for instance use checks,
as described above. Plugin classes derived from that interface must reimplement
the constructor too, of course.

Additionaly, interface must be defined with PLUGIN_INTERFACE() macro in
header to make sure loaded plugins will use the same interface in the same
version. One single argument is an string which uniquely names that particular
interface. A good practice is to use "Java package name"-style syntax because
this makes the name as unique as possible. The interface name should also
contain version identifier to make sure the plugin will not be loaded with
incompatible interface version.

So, there is an example interface class:
@dontinclude pluginmanager/AbstractAnimal.h
@skip class AbstractAnimal
@until };

@section plugin-management-plugin Plugin definition

Every plugin is represented by one class, which is derived from one plugin
interface. The plugin class in then registered as static or dynamic plugin.
Every plugin must also have its configuration file, which can describe plugin
metadata such as human readable plugin name, author, description, plugin
dependencies etc. Full specification of plugin configuration file syntax can
be found in PluginMetadata class documentation.

First we define one static plugin, which will be included in the
application out-of-the-box. After declaring that plugin we register it with
macro PLUGIN_REGISTER(). The first argument is plugin name (which will be
used when instancing the plugin), second argument is name of the plugin class
and third is name of used plugin interface.
@dontinclude pluginmanager/Canary.cpp
@skip class Canary
@until };
@skipline PLUGIN_REGISTER

Configuration file for Canary plugin:
@include pluginmanager/Canary.conf

Then we define one example dynamic plugin. Note that the macro for
registering dynamic plugin is the same, the only difference will be in
`CMakeLists.txt`, as you will see below. This way you can decide at compile
time which plugins will be dynamic, which will be static, or, for example,
which will be compiled directly into the library/application, so they can be
used directly without plugin manager.
@dontinclude pluginmanager/Dog.cpp
@skip class Dog
@until };
@skipline PLUGIN_REGISTER

Configuration file for Dog plugin:
@include pluginmanager/Dog.conf

 - @ref pluginmanager/AbstractAnimal.h
 - @ref pluginmanager/Canary.cpp
 - @ref pluginmanager/Canary.conf
 - @ref pluginmanager/Dog.cpp
 - @ref pluginmanager/Dog.conf

@section plugin-management-compilation Plugin compilation

`CorradeMacros.cmake` provides CMake macros for compiling both static and
dynamic plugins:
@dontinclude pluginmanager/CMakeLists.txt
@skip corrade_add_plugin
@until corrade_add_static_plugin

`corrade_add_plugin()` macro takes plugin name as first argument, second
argument is dir where to install the plugin files, third argument is name of
configuration file and after that comes one or more source files. We use the
build directory for storing the plugins to avoid the need for installation.

`corrade_add_static_plugin()` macro compiles every static plugin as single
static library. To make linking easier for you, first argument is variable
where are stored names of all static plugins' libraries. The variable will be
then used for linking the final executable, as you can see below.

@section plugin-management-management Plugin management

Now it's time to initialize PluginManager class and make use of the plugins.
PluginManager is templated class and that means it will load and make
available only plugins with given interface specified as template.

To make sure plugin manager will find the static plugins, we must import them
with a macro PLUGIN_IMPORT() (for example at the beginning of main function),
which takes plugin name as argument.

This example application will take first argument passed on commandline and
if a plugin is found and loaded successfully, displays brief info about a
given animal.
@dontinclude pluginmanager/main.cpp
@skip int main
@until }
@until }
@until }

Compile the application with simple CMake `add_executable()` command and don't
forget to link in all the static plugins compiled above:
@dontinclude pluginmanager/CMakeLists.txt
@skip add_executable
@until target_link_libraries

After successfull compilation we can run the application with plugin name
as argument:

    $ ./PluginTest Canary
    Using plugin 'I'm allergic to canaries!'

    Name:      Achoo
    Leg count: 2
    Has tail:  yes

    $ ./PluginTest Dog
    Using plugin 'A simple dog plugin'

    Name:      Doug
    Leg count: 4
    Has tail:  yes

 */
}}
