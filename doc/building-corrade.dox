/*
    This file is part of Corrade.

    Copyright © 2007, 2008, 2009, 2010, 2011, 2012, 2013
              Vladimír Vondruš <mosra@centrum.cz>

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

/** @page building-corrade Downloading and building

%Corrade can be built in many ways. You can either @ref building-compilation
"compile it manually" or use already prepared packaging files, such as
@ref building-arch "ArchLinux PKGBUILDs", @ref building-rpm "RPMs" (currently
tested are openSUSE, Fedora, Mandriva), or @ref building-deb "DEBs" (currently
tested are Debian and Ubuntu). Guide how to crosscompile for @ref building-win
"Windows", @ref building-nacl "Google Chrome Native Client" and
@ref building-emscripten "Emscripten" is also available.

@tableofcontents

Minimal set of tools required for building is:

- C++ compiler with good C++11 support. Currently there are two compilers
  which are tested to support everything needed: **GCC** >= 4.6 and **Clang**
  >= 3.1. On Windows you can use **MinGW**, Visual Studio compiler still lacks
  some needed features.
- **CMake** >= 2.8.8

@section building-download Downloading the sources

The source is available on GitHub: https://github.com/mosra/corrade. Clone the
repository with your favorite IDE or Git GUI, download currrent snapshot as
compressed archive or use the command line:

    git clone git://github.com/mosra/corrade.git

If you need toolchains for crosscompiling, run also the following commands, or,
if you build from source archive, download snapshot of toolchains repository
from https://github.com/mosra/toolchains and put them in `toolchains/`
subdirectory.

    git submodule init
    git submodule update

@section building-compilation Compilation, installation

@subsection building-linux Via command-line (on Linux/Unix)

On Unix-based OSs, the library can be built and installed using these four
commands:

    mkdir -p build
    cd build
    cmake -DCMAKE_INSTALL_PREFIX=/usr .. && make
    make install

The library provides some useful CMake options (described in sections later).
They can be passed to CMake either as `-Dname=value` parameters on command-line
(like above) or set conveniently using `cmake-gui`:

    cd build
    cmake-gui .

@subsection building-windows Using QtCreator and CMake GUI (on Windows)

On Windows, if you don't want to touch the command-line, the easiest way is to
install QtCreator (just QtCreator, you don't need the full Qt SDK), configure
it to use MinGW and CMake and then just open project's root `CMakeLists.txt`
file within it. QtCreator then asks you where to create build directory, allows
you to specify initial CMake parameters and then you can just press Configure
and everything is ready to be built. You might need to set some CMake
parameters before configuring, they can be set with `-Dname=value`. See below
for more information.

After the initial import you might want to reconfigure some additional CMake
variables. Start CMake GUI, point it to the recently created build dir, modify
the variables and press Generate. QtCreator will detect the changes and reparse
the project accordingly.

For most convenient usage it's best to set `CMAKE_INSTALL_PREFIX` to directory
where MinGW is installed (e.g. `C:/MinGW/`) and add `C:/MinGW/bin` and
`C:/MinGW/lib` to `PATH`. Installation to given prefix can be then done from
within QtCreator by adding new `make install` build rule.

@subsubsection building-corrade-windows-troubleshooting Windows troubleshooting

Until GCC 4.8 is available in MinGW, you need to enable `GCC47_COMPATIBILITY`
for building Corrade on Windows. See below for more information.

@subsection building-features Enabling or disabling features

The libraries are build as shared by default. If you are developing for
platform which doesn't support shared libraries or if you just want to link
them statically, enable `BUILD_STATIC` to build the libraries as static. If you
plan to use them with shared libraries later, enable also position-independent
code with `BUILD_STATIC_PIC`. If you want to build with another compiler (e.g.
Clang), pass `-DCMAKE_CXX_COMPILER=clang++` to CMake.

%Corrade by default does not install `FindCorrade.cmake`, as you should bundle
the module with your code instead of depending on it being in system location.
You can install it by enabling `WITH_FIND_MODULE`. When this option is enabled,
all the CMake modules are installed into root CMake path, which may require
root privileges. This can also help some IDEs (namely KDevelop) to find the
included modules easier and provide better CMake support, e.g. parsing targets
from `corrade_add_test()` calls.

By default the library expects standards conforming compiler. However, for
portability, compatibility mode for older compilers is provided:

- `GCC47_COMPATIBILITY` -- Enable for compiling with compatibility mode for GCC
  4.7. You need to enable this also if you are building with Clang and don't
  have GCC 4.8 libs.
- `GCC46_COMPATIBILITY` -- Enable for compiling with compatibility mode for GCC
  4.6. You need to enable this also if you are building with Clang and don't
  have GCC 4.7 libs.

%Corrade will detect the compiler used and refuses to build (or be used) if
some compatibility mode needs to be enabled. On the other hand, if any of these
is enabled, Corrade will refuse to build (or be used) with any newer compiler.

The features used can be conveniently detected in depending projects both in
CMake and C++ sources, see @ref corrade-cmake and @ref src/Corrade.h for more
information.

@subsection building-tests Building and running unit tests

If you want to build also unit tests (which are not built by default), enable
`BUILD_TESTS` in CMake. Unit tests use Corrade's own @ref Corrade::TestSuite "TestSuite"
framework and can be run either manually (the binaries are located in `Test/`
subdirectories of build directory) or using

    ctest --output-on-failure

in build directory. On Windows the tests require the library to be installed
with DLLs accessible through `PATH`. See above for more information.

@subsection building-doc Building documentation

The documentation (which you are currently reading) is written in **Doxygen**
(preferrably 1.8 with Markdown support, but older versions should do good job
too) and additionally uses **Graphviz** for class diagrams. The documentation
can be build by running

    doxygen

in root directory (i.e. where `Doxyfile` is). Resulting HTML documentation
will be in `build/doc/` directory.

@subsection Building-examples Building examples

The library comes with handful of examples, contained in `examples/`
directory. Documentation for them is available on page @ref corrade-example-index.
The examples require %Corrade to be installed and they are built separately:

    mkdir -p build-examples
    cd build-examples
    cmake ../examples
    make

@section building-arch Building ArchLinux packages

In `package/archlinux` directory are three PKGBUILDs - one for stable version,
one for Git development build and one for building under MinGW. The packages
are also in AUR under the same names.

There are also a few development PKGBUILDs in project root, which allow you to
build and install the package directly from source tree without downloading
anything. The native PKGBUILD also contains `check()` function which will run
all unit tests before packaging.

If you want to build with another compiler (e.g. Clang), run makepkg this way:

    CXX=clang++ makepkg

Development PKGBUILDs can detect when Clang is used and remove unsupported CXX
flags.

@section building-rpm Building RPM packages

Every package contains `spec` files for RPM-based distributions in
`package/rpm/` directory. In addition you will need `rpm-build` package
and `~/.rpmmacros` file, which contains at least this:

    %%_topdir /directory/where/to/store/rpms
    %%_tmppath /directory/where/to/do/compilation
    %%packager Your Name <your@email.com>

First you need to download or create source tarball. Source tarball can
be downloaded from GitHub (URL is in spec file), or in subdirectory `package/`
there is an script `make-github-like-archive.sh`, which generates exactly the
same tarballs.

The downloaded or generated tarball must be moved or copied to
`%{_topdir}/SOURCES` directory, so `rpmbuild` can find it.

When you have the sources, go to `package/rpm/` directory and run this:

    rpmbuild -bb corrade.spec

This will compile and generate library and development RPM for %Corrade in
`%{_topdir}/RPMS`.

@section building-deb Building DEB packages

There is also `debian/` directory with all files needed for building Debian
packages. In addition you will need `dpkg-dev` package. Building is easy,
just change directory to package root, copy `package/debian` directory there
and run `dpkg-buildpackage`:

    cp package/debian .
    dpkg-buildpackage

This will compile binary and development packages, which will then appear in
parent directory.

@section building-win Crosscompiling for Windows using MinGW

@note This guide is tailored mainly for crosscompiling from ArchLinux. For
this system there are also prepared `mingw32-corrade` packages, one in
`package/archlinux` and one in root, named `PKGBUILD-mingw32`. The package is
also in AUR under the same name.

You will need MinGW32 version of the compiler and libraries, i.e. these
ArchLinux packages:

- `mingw32-gcc`
- `mingw32-runtime`

Make sure you have `toolchains` submodule updated, as
@ref building-download "explained above". Then create build directory and run
cmake and make. You may need to modify the `basic-mingw32.cmake` file and
`CMAKE_INSTALL_PREFIX` to suit your distribution filesystem hierarchy.

    mkdir build-win
    cd build-win
    cmake .. \
        -DCMAKE_TOOLCHAIN_FILE=../toolchains/archlinux/basic-mingw32.cmake \
        -DCMAKE_INSTALL_PREFIX=/usr/i486-mingw32
    make

Then you can install the package using `make install` to make it available for
depending projects.

@section building-nacl Compiling for Google Chrome Native Client

You will need [Native Client SDK](https://developers.google.com/native-client/beta/sdk/download).
Minimal supported version is `pepper_25`.

Make sure you have `toolchains` submodule updated, as
@ref building-download "explained above". You can choose from either `glibc` or
`newlib` toolchain. `Newlib` supports only static linking, thus `BUILD_STATIC`
is implicitly enabled. Don't forget to adapt `NACL_PREFIX` variable in
`generic/NaCl-*-x86-32.cmake` and `generic/NaCl-*-x86-64.cmake` to path where
your SDK is installed. Default is `/usr/nacl`. You may need to adapt also
`NACL_TOOLCHAIN_PATH` so CMake is able to find the compiler.

Then create build directories for x86-32 and x86-64 and run cmake and make in
them. The toolchains need access to its platform file, so be sure to properly
set **absolute** path to `modules/` directory containing `Platform/NaCl.cmake`.
Also adapt `CMAKE_INSTALL_PREFIX` to the same value as in `NACL_PREFIX` in
toolchain file.

    mkdir -p build-nacl-x86-32
    cd build-nacl-x86-32
    cmake .. \
        -DCMAKE_MODULE_PATH="/absolute/path/to/toolchains/modules" \
        -DCMAKE_TOOLCHAIN_FILE="../toolchains/generic/NaCl-glibc-x86-32.cmake" \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=/usr/nacl \
        -DLIB_SUFFIX=/32
    make

    mkdir -p build-nacl-x86-64
    cd build-nacl-x86-64
    cmake .. \
        -DCMAKE_MODULE_PATH="/absolute/path/to/toolchains/modules" \
        -DCMAKE_TOOLCHAIN_FILE="../toolchains/generic/NaCl-glibc-x86-64.cmake" \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=/usr/nacl
    make

Then you can install both versions using `make install` to make them available
for depending projects. The headers are shared by both versions.

For ArchLinux there are also prepared package files in root, named
`PKGBUILD-nacl-glibc` and `PKGBUILD-nacl-newlib`.

@section building-emscripten Compiling for Emscripten

You will need [Emscripten](https://github.com/kripken/emscripten/wiki/Tutorial)
installed and configured.

Make sure you have `toolchains` submodule updated, as
@ref building-download "explained above". Don't forget to adapt
`EMSCRIPTEN_PREFIX` variable in `generic/Emscripten.cmake` to path where
Emscripten is installed. You might want to build static libraries, as they will
be faster than dynamic libraries. See `BUILD_STATIC` above.

Then create build directory and run cmake and make in it. The toolchain needs
access to its platform file, so be sure to properly set **absolute** path to
`modules/` directory containing `Platform/Emscripten.cmake`. Default is
`/usr/emscripten`. Also set `CMAKE_INSTALL_PREFIX` to the same value as in
`EMSCRIPTEN_TOOLCHAIN_PATH` in toolchain file.

    mkdir -p build-emscripten
    cd build-emscripten
    cmake .. \
        -DCMAKE_MODULE_PATH="/absolute/path/to/toolchains/modules" \
        -DCMAKE_TOOLCHAIN_FILE="../toolchains/generic/Emscripten.cmake" \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=/usr/emscripten/system \
        -DBUILD_STATIC=ON
    make

Then you can install the library using `make install` to make it available for
depending projects.

If you have Node.js installed, you can also build and run unit tests using
`ctest`. See `BUILD_TESTS` above.

*/
